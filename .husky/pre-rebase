#!/usr/bin/env sh
. "$(dirname -- "$0")/_/husky.sh"

# Pre-rebase hook runs before git rebase
# Warns about rebasing sensitive commits

# Color codes
RED='\033[0;31m'
YELLOW='\033[1;33m'
GREEN='\033[0;32m'
NC='\033[0m'

echo "🔍 Checking commits before rebase..."

# Get the branch being rebased
BRANCH=$(git rev-parse --abbrev-ref HEAD)
UPSTREAM=$1

# Check for commits with classification markers
CLASSIFIED_COMMITS=$(git log --oneline "$UPSTREAM".."$BRANCH" | grep -E "\[(SECRET|TS|TOP-SECRET)\]" || true)

if [ ! -z "$CLASSIFIED_COMMITS" ]; then
  echo "${RED}⚠️  WARNING: Classified commits detected!${NC}"
  echo ""
  echo "The following commits contain classification markers:"
  echo "${YELLOW}$CLASSIFIED_COMMITS${NC}"
  echo ""
  echo "Rebasing classified commits may:"
  echo "  - Expose sensitive information in public history"
  echo "  - Violate security protocols"
  echo "  - Require re-classification"
  echo ""
  read -p "Are you sure you want to continue? (y/N) " -n 1 -r
  echo ""
  if [[ ! $REPLY =~ ^[Yy]$ ]]; then
    echo "${RED}Rebase cancelled${NC}"
    exit 1
  fi
fi

# Check for commits with patent references
PATENT_COMMITS=$(git log --oneline "$UPSTREAM".."$BRANCH" | grep -iE "(patent|innovation|novel|breakthrough)" || true)

if [ ! -z "$PATENT_COMMITS" ]; then
  echo "${YELLOW}💡 Patent-related commits detected:${NC}"
  echo "$PATENT_COMMITS"
  echo ""
  echo "Remember to preserve patent documentation!"
fi

# Check for commits that touch security-critical files
SECURITY_FILES="security-platform|maestro|cisa-compliance|air-gap|crypto|auth"
SECURITY_COMMITS=$(git log --name-only --oneline "$UPSTREAM".."$BRANCH" | grep -B1 -E "$SECURITY_FILES" | grep -E "^[a-f0-9]{7}" || true)

if [ ! -z "$SECURITY_COMMITS" ]; then
  echo "${YELLOW}🔒 Security-critical commits detected${NC}"
  echo "These commits modify security components:"
  echo "$SECURITY_COMMITS"
  echo ""
  echo "Ensure security review is maintained after rebase"
fi

# Check for large commits that might be squashed
LARGE_COMMITS=$(git log --shortstat "$UPSTREAM".."$BRANCH" | grep -B1 -E "[0-9]{3,} insertion|[0-9]{3,} deletion" | grep -E "^commit" | cut -d' ' -f2 | cut -c1-7 || true)

if [ ! -z "$LARGE_COMMITS" ]; then
  echo "${YELLOW}📦 Large commits detected${NC}"
  echo "Consider preserving commit granularity for:"
  for commit in $LARGE_COMMITS; do
    echo "  - $(git log -1 --oneline $commit)"
  done
fi

# Backup important metadata before rebase
echo ""
echo "📸 Creating pre-rebase backup..."

# Create backup directory
BACKUP_DIR=".git/rebase-backups/$(date +%Y%m%d-%H%M%S)"
mkdir -p "$BACKUP_DIR"

# Save current state
git log --oneline -20 "$BRANCH" > "$BACKUP_DIR/commits.txt"
git diff --stat "$UPSTREAM".."$BRANCH" > "$BACKUP_DIR/changes.txt"
echo "$BRANCH rebasing onto $UPSTREAM" > "$BACKUP_DIR/info.txt"

# Save task references
TASK_REFS=$(git log --oneline "$UPSTREAM".."$BRANCH" | grep -oE "#[0-9]+" | sort -u || true)
if [ ! -z "$TASK_REFS" ]; then
  echo "$TASK_REFS" > "$BACKUP_DIR/task-refs.txt"
  echo "📋 Task references backed up: $TASK_REFS"
fi

echo "${GREEN}✅ Backup created at: $BACKUP_DIR${NC}"
echo ""
echo "Proceeding with rebase..."