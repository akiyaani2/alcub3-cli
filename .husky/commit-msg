#!/usr/bin/env sh
. "$(dirname -- "$0")/_/husky.sh"

# Color codes for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

COMMIT_MSG_FILE=$1
COMMIT_MSG=$(cat "$COMMIT_MSG_FILE")

# Skip validation for merge commits
if echo "$COMMIT_MSG" | grep -E "^Merge" > /dev/null; then
  exit 0
fi

# Check for conventional commit format
if ! echo "$COMMIT_MSG" | grep -E "^(feat|fix|docs|style|refactor|test|chore|perf|build|ci|revert)(\(.+\))?: .+" > /dev/null; then
  echo "${RED}❌ Invalid commit message format!${NC}"
  echo ""
  echo "Your commit message must follow the Conventional Commits format:"
  echo "  <type>(<scope>): <subject>"
  echo ""
  echo "Examples:"
  echo "  ${GREEN}feat(security): add quantum-resistant encryption${NC}"
  echo "  ${GREEN}fix(robotics): resolve Spot connection timeout${NC}"
  echo "  ${GREEN}docs: update ALCUB3 installation guide${NC}"
  echo ""
  echo "Types: feat, fix, docs, style, refactor, test, chore, perf, build, ci, revert"
  echo ""
  echo "Your message: ${YELLOW}$COMMIT_MSG${NC}"
  exit 1
fi

# Check for minimum length
SUBJECT=$(echo "$COMMIT_MSG" | sed -E 's/^[a-z]+(\(.+\))?: //')
if [ ${#SUBJECT} -lt 10 ]; then
  echo "${RED}❌ Commit subject too short!${NC}"
  echo ""
  echo "Subject must be at least 10 characters long."
  echo "Your subject: ${YELLOW}$SUBJECT${NC} (${#SUBJECT} chars)"
  exit 1
fi

# Check for capitalization (first letter after type should be lowercase)
if echo "$SUBJECT" | grep -E "^[A-Z]" > /dev/null; then
  echo "${YELLOW}⚠️  Warning: Commit subject should start with lowercase${NC}"
  echo "Consider: $(echo "$SUBJECT" | sed 's/^./\L&/')"
fi

# Check for classification markers if dealing with sensitive files
STAGED_FILES=$(git diff --cached --name-only)
SENSITIVE_AREAS="maestro|security-platform|cisa-compliance|air-gap"

if echo "$STAGED_FILES" | grep -E "$SENSITIVE_AREAS" > /dev/null; then
  if ! echo "$COMMIT_MSG" | grep -E "\[(UNCLASSIFIED|SECRET|TS|TOP-SECRET)\]" > /dev/null; then
    echo "${YELLOW}⚠️  Warning: Changes to sensitive areas should include classification marker${NC}"
    echo "Consider adding [UNCLASSIFIED], [SECRET], or [TOP-SECRET] to your commit message"
  fi
fi

# Validate task references if present
if echo "$COMMIT_MSG" | grep -E "#[0-9]+" > /dev/null; then
  TASK_REFS=$(echo "$COMMIT_MSG" | grep -oE "#[0-9]+" | grep -oE "[0-9]+")
  for TASK_ID in $TASK_REFS; do
    # Check if task exists in task master (if available)
    if [ -f ".taskmaster/tasks/tasks.json" ] && command -v jq >/dev/null 2>&1; then
      TASK_EXISTS=$(jq -r --arg id "$TASK_ID" '
        .. | objects | select(.tasks?) | .tasks[] | 
        select(.id == ($id | tonumber)) | .id
      ' .taskmaster/tasks/tasks.json 2>/dev/null | head -1)
      
      if [ -z "$TASK_EXISTS" ]; then
        echo "${YELLOW}⚠️  Warning: Task #$TASK_ID not found in task master${NC}"
      fi
    fi
  done
fi

# Check for patent keywords
if echo "$COMMIT_MSG" | grep -iE "novel|innovative|breakthrough|unique|patent" > /dev/null; then
  echo "${GREEN}💡 Patent opportunity detected!${NC}"
  echo "Consider documenting this innovation in 00-strategic/patents/"
fi

# Success
echo "${GREEN}✅ Commit message validated${NC}"