#!/usr/bin/env sh
. "$(dirname -- "$0")/_/husky.sh"

# Auto-format files if needed
echo "üé® Checking code formatting..."

# Get list of staged files that can be formatted
STAGED_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep -E "\.(ts|tsx|js|jsx|json|md)$" || true)

if [ ! -z "$STAGED_FILES" ]; then
  # Check if any files need formatting
  NEEDS_FORMAT=$(npm run format -- --check $STAGED_FILES 2>&1 | grep -E "would be formatted|Code style issues" || true)
  
  if [ ! -z "$NEEDS_FORMAT" ]; then
    echo "üìù Auto-formatting files..."
    
    # Format the staged files
    npm run format -- --write $STAGED_FILES
    
    # Re-stage the formatted files
    echo "$STAGED_FILES" | xargs git add
    
    echo "‚úÖ Files auto-formatted and re-staged"
  else
    echo "‚úÖ All files properly formatted"
  fi
fi

# Run lint-staged with correct config path
echo "üé® Running lint-staged..."
npx lint-staged -c .build/config/.lintstagedrc.json

# Auto-fix common linting issues
echo "üîß Auto-fixing linting issues..."
LINT_FIXABLE=$(npm run lint -- --fix-dry-run $STAGED_FILES 2>&1 | grep -E "fixable" || true)
if [ ! -z "$LINT_FIXABLE" ]; then
  echo "   Applying automatic lint fixes..."
  npm run lint:fix -- $STAGED_FILES
  echo "$STAGED_FILES" | xargs git add
  echo "‚úÖ Lint issues auto-fixed"
fi

# Run quick tests (unit tests only, not integration)
echo "üß™ Running unit tests..."
npm run test:unit || exit 1

# Check for secrets
echo "üîç Scanning for hardcoded secrets..."
if grep -r "password=\|api_key=\|secret=\|private_key=" --include="*.ts" --include="*.js" --exclude-dir=node_modules --exclude-dir=dist --exclude-dir=coverage --exclude="*test*" --exclude="*spec*" 01-security-platform/ 02-robotics-hal/ 03-maestro-framework/ 04-simulation-platform/ 05-cisa-compliance/ 06-neural-compression/ 07-space-operations/ 08-world-foundation-models/ 09-agent-marketplace/ 0X-developer-experience/ 2>/dev/null | grep -v "// SAFE:" > /dev/null; then
  echo "‚ùå Potential secret found! Remove it before committing."
  echo "   Add '// SAFE: <reason>' comment if this is intentional"
  exit 1
fi

# Check for patent opportunities
echo "üí° Scanning for patent opportunities..."
if grep -r "TODO.*patent\|PATENT\|innovative\|novel\|breakthrough" --include="*.ts" --include="*.js" --include="*.py" 01-security-platform/ 02-robotics-hal/ 03-maestro-framework/ 04-simulation-platform/ 05-cisa-compliance/ 06-neural-compression/ 07-space-operations/ 08-world-foundation-models/ 09-agent-marketplace/ 2>/dev/null; then
  echo "üìã Patent opportunity detected! Consider documenting in 00-strategic/patents/"
fi

# Performance budget check
echo "‚ö° Checking performance annotations..."
if grep -r "@PerformanceBudget\|PerformanceBudget.measure" --include="*.ts" --include="*.js" 01-security-platform/ 02-robotics-hal/ 03-maestro-framework/ 2>/dev/null | grep -v "max_time_ms=[0-9]" > /dev/null; then
  echo "‚ö†Ô∏è  Performance budget annotations found without time limits. Add max_time_ms parameter."
fi

# Task Master integration check
echo "üìã Checking for task references..."
COMMIT_MSG=$(git diff --cached --name-only | xargs git diff --cached | grep -E "task #[0-9]+|completes #[0-9]+|fixes #[0-9]+" || true)
if [ ! -z "$COMMIT_MSG" ]; then
  echo "‚úÖ Task references found in changes"
fi

# Auto-add missing file headers if needed
echo "üìÑ Checking file headers..."
for file in $STAGED_FILES; do
  if [[ "$file" =~ \.(ts|js)$ ]] && [ -f "$file" ]; then
    # Check if file has Apache license header
    if ! head -5 "$file" | grep -q "Apache License"; then
      # Check if this is a test file (they often don't need headers)
      if [[ ! "$file" =~ \.(test|spec)\.(ts|js)$ ]]; then
        echo "‚ö†Ô∏è  Missing license header in $file (skipping auto-add for safety)"
      fi
    fi
  fi
done

# Check for console.log statements (except in tests)
echo "üö´ Checking for console.log statements..."
DEBUG_LOGS=$(git diff --cached | grep "^+" | grep "console\.log" | grep -v "// DEBUG:" | grep -v "test\|spec" || true)
if [ ! -z "$DEBUG_LOGS" ]; then
  echo "‚ö†Ô∏è  Found console.log statements (add '// DEBUG:' comment if intentional)"
fi

# Remind about documentation for new files
NEW_FILES=$(git diff --cached --name-only --diff-filter=A | grep -E "\.(ts|js)$" | grep -v "test\|spec" || true)
if [ ! -z "$NEW_FILES" ]; then
  echo "üìö New files added. Remember to:"
  echo "   - Update relevant documentation"
  echo "   - Add tests for new functionality"
  echo "   - Update CLAUDE.md if adding new commands"
fi

echo "‚úÖ Pre-commit checks passed"
